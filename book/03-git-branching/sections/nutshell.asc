[[_git_branches_overview]]
=== Grananje ukratko

Da bismo stvarno razumeli kako Git barata grananjem, moramo da se odmaknemo korak unazad i da istražimo kako Git čuva podatke.

Kao što se možda sećate iz <<_getting_started>>, Git ne čuva podatke kao seriju skupa promena ili razlika, već kao seriju snimaka.

Kada napravite komit, Git čuva komit-objekat koji sadrži pokazivač na snimak objekta koji je stejdžovan.
Ovaj objekat sadrži i autorovo ime i mejl, poruku koja je ukucana, i pokazivače na komit ili komitove koji su direktno došli pre ovog komita (roditelja ili roditelje): nula roditelja na inicijalni komit, jednog roditelja za normalni komit, i više roditelja za komit koji je rezultat spajanja dveju ili više grana.

Da bismo vizualizovali ovo, pretpostavimo da imate direktorijum koji sadrži tri fajla, i sve ih stejdžujete a zatim komitujete.
Stejdžovanje fajlova računa kontrolnu sumu nad svakim od njih (SHA-1 heš kako smo pomenuli u <<_getting_started>>), čuva tu verziju fajla u Git repozitorijumu (Git to naziva blobovima) i dodaje tu kontrolnu sumu na stejdž:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'
----

Kada napravite komit sa `git commit`, Git pravi kontrolnu sumu svakog poddirektorijuma (u ovom slučaju, samo koreni direktorijum projekta) i čuva ta stabla u Git repozitorijumu.(((git commands, commit)))
Git onda kreira komit-objekat koji ima metapodatke i pokazivač na koren stabla projekta tako da može da ponovo kreira taj snimak kada nam bude bio potreban.

Vaš Git repozitorijum sada sadrži pet objekata: jedan blob za sadržaj svakog og tri fajla, jedno stablo koje sadrži listu sadržaja direktorijuma i specificira koja imena fajlova su sačuvana u kom blobu, i jedan komit sa pokazivačem na taj koren stabla i sve komit metapodatke.

.Komit i njegovo stablo
image::images/commit-and-tree.png[Komit i njegovo stablo.]

Ako napravite neke izmene i komitujete ponovo, sledeći komit čuva pokazivač na komit koji je došao odmah pre njega.

.Komitovi i njihovi roditelji
image::images/commits-and-parents.png[Komitovi i njihovi roditelji.]

Grana u Gitu je jednostavno mali pokretni pokazivač na jedan od ovih komitova.
Podrazumevano ime grane u Gitu je `master`.
Kada počnete da komitujete, daje vam se `master` grana koja pokazuje na poslednji komit koji ste napravili.
Svaki put kada komitujete, kreće se napred automatski.

[NOTE]
====
`master` grana u Gitu nije posebna grana.(((master)))
Ona je ista kao i svaka druga grana.
Jedini razlog zbog kojeg skoro svaki repozitorijum ima takvu granu je to što je komanda `git init` napravi po podrazumevanim podešavanjima i većina ljudi nema potrebu da je menja.
====

.Grana i njena istorija komitova
image::images/branch-and-history.png[Grana i njena istorija komitova.]

[[_create_new_branch]]
==== Pravljenje nove grane

(((branches, creating)))
Šta se dešava kada napravite novu granu?
Pa, kada to uradite, stvara vam se novi pokazivač kojim se krećete unaokolo.
Recimo da napravite novu granu koju ćete nazvati `testing`.
Ovo se radi komandom `git branch`:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

Ovo stvara novi pokazivač na isti komit na kom se trenutno nalazite.

.Dve grane pokazuju na istu seriju komitova
image::images/two-branches.png[Dve grane pokazuju na istu seriju komitova.]

Kako Git zna na kojoj se grani trenutno nalazite?
Čuva poseban pokazivač koji se zove `HEAD`.
Obratite pažnju na to da je ovo mnogo drugačije od koncepta `HEAD`-a u drugim VCS-ovima na koje ste možda navikli, kao što su _Subversion_ ili _CVS_.
U Gitu, ovo je pokazivač na lokalnu granu na kojoj se trenutno nalazite.
U ovom slučaju, još uvek ste na `master` grani. Komandom `git branch` ste samo _napravili_ novu granu -- niste prešli na nju.

.`HEAD` pokazuje na granu.
image::images/head-to-master.png[`HEAD` pokazuje na granu.]

Ovo lako možete da vidite tako što ćete pokrenuti običnu komandu `git log` koja vam pokazuje gde pokazuju pokazivači na grane.
Ova opcija se zove `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface
34ac2 Fixed bug #1328 - stack overflow under certain conditions
98ca9 The initial commit of my project
----

Vidite da su `master` i `testing` grane odmah pored komita `f30ab`.

[[_switching_branches]]
==== Menjanje grana

(((branches, switching)))
Da biste se prebacili na postojeću granu, treba da pokrenete komandu `git checkout`.(((git commands, checkout)))
Hajde da se prebacimo na novu granu `testing`:

[source,console]
----
$ git checkout testing
----

Ovo pomera pokazivač `HEAD` na granu `testing`.

.`HEAD` pokazuje na trenutnu granu.
image::images/head-to-testing.png[`HEAD` pokazuje na trenutnu granu.]

Čemu ovo? Pa, hajde da uradimo još jedan komit:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.`HEAD` grana se pomera napred kada se napravi komit.
image::images/advance-testing.png[`HEAD` grana se pomera napred kada se napravi komit.]

Ovo je zanimljivo, jer se sada grana `testing` pomerila napred, ali grana `master` još uvek pokazuje na komit na kome ste bili kada ste pokrenuli `git checkout` da promenite grane. Hajde da se vratimo nazad na granu `master`:

[source,console]
----
$ git checkout master
----

.`HEAD` se pomera kada uradite čekaut.
image::images/checkout-master.png[`HEAD` se pomera kada uradite čekaut.]

Ova komanda je uradila dve stvari.
Pomerila je pokazivač `HEAD` nazad na mesto u grani `master`, i vratila je fajlove u radnom direktorijumu na snimak na koji pokazuje `master`.
Ovo takođe znači da će promene koje pravite odsad pa nadalje divergirati od stare verzije projekta.
Bukvalno se vraćate nazad poništavajući ono što ste uradili u `testing` grani da biste mogli da krenete drugim putem.

[NOTE]
.Menjanje grana menja fajlove u radnom direktorijumu
====
Važno je primetiti da će se fajlovi u radnom direktorijumu promeniti kada skačete s grane na granu.
Ako se prebacite na stariju granu, radni direktorijum će se vratiti na izgled koji je imao u vreme kada ste komitovali na toj grani.
Ako Git nije u stanju da to uradi bez problema, neće vam dati da se prebacite uopšte.
====

Hajde da napravimo neke promene i ponovo komitujemo:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Sada je istorija vašeg projekta divergirala (pogledate <<divergent_history>>).
Napravili ste granu, prebacili ste se na nju, uradili nešto na njoj, i onda se vratili nazad na glavnu granu i uradili još malo posla.
Obe ove promene su izolovane u posebnim granama: možete da skačete s jedne na drugu napred-nazad i da ih spojite kada budete bili spremni.
I sve ste to uradili prostim komandama `branch`, `checkout` i `commit`.

[[divergent_history]]
.Divergentna istorija
image::images/advance-master.png[Divergentna istorija.]

Ovo lako možete pogledati i sa `git log` komandom.
Ako pokrenete `git log --oneline --decorate --graph --all`, odštampaće vam se istorija komitova, pokazujući vam gde se sada nalaze pokazivači na grane i kako je istorija divergirala.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Pošto je grana u Gitu zapravo jednostavan fajl koji sadrži 40 karaktera SHA-1 čeksume na koju pokazuje komit, pravljenje i uništavanje grana je jeftino.
Napraviti novu granu je brzo i jednostavno koliko i upisivanje 41 bajta u fajl (40 slova i nova linija).

Ovo je u oštrom kontrastu sa načinom na koji radi većina starijih alata za grananje u VCS-ovima, u kojima je potrebno kopirati sve fajlove projekta u drugi direktorijum.
Ovo može potrajati nekoliko sekundi ili čak minuta, u zavisnosti od veličine projekta, dok je u Gitu ovakav proces uvek trenutan.
Takođe, pošto beležimo roditelje kada komitujemo, pronalaženje odgovarajuće baze za spajanje se automatski odradi umesto da se mi bavimo time i u opštem slučaju je taj proces veoma jednostavan.
Ove osobine podstiču programere da često prave i koriste grane.

Hajde da pogledamo zašto to treba da radite.
